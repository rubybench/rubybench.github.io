:ruby
  benchmarks = %w[
    activerecord hexapdf liquid-render mail psych-load railsbench
    binarytrees chunky_png erubi erubi_rails etanni fannkuchredux lee nbody optcarrot ruby-lsp rubykon
  ]
.benchmark_page
  .text-center
    %h1 yjit-bench

    = github_link 'Shopify/yjit-bench'

    #graph_metadata{ 'data-unit': 's', 'data-type': 'line' }

    %ul.nav.nav-pills.benchmark_navbar
      - benchmarks.each_with_index do |benchmark, index|
        %li{ class: ('active' if index == 0) }
          %a.activate-chart{ href: '#', 'data-id': benchmark }= benchmark

- graph_data = { 'data-versions': %w[foo bar baz], 'data-vm-values': [12, 13, 14], 'data-jit-values': [15, 16, 17], 'data-yjit-values': [18, 19, 20] }
- benchmarks.each do |benchmark|
  .benchmark_graph{ graph_data, id: benchmark, 'data-name': benchmark, style: "width: 100%; height: 340px;" }

:javascript
  $(function() {
    function plotChart(graphElement) {
      var type = $('#graph_metadata').data('type');
      var unit = $('#graph_metadata').data('unit');
      var name = graphElement.data('name');

      var series = [{
        name: name,
        data: graphElement.data('vm-values')
      }]
      if (graphElement.data('jit-values')) {
        series.push({
          name: name + " +MJIT",
          data: graphElement.data('jit-values')
        })
      }
      if (graphElement.data('yjit-values')) {
        series.push({
          name: name + " +YJIT",
          data: graphElement.data('yjit-values')
        })
      }

      Highcharts.chart(graphElement.attr('id'), {
        chart: {
          zoomType: 'x',
          type: type
        },
        title: {
          text: name
        },
        yAxis: {
          min: 0,
          title: {
            text: unit
          }
        },
        xAxis: {
          categories: graphElement.data('versions'),
          labels: {
            // formatter: function() {
            //   return /Ruby: ([^<T ]+)/.exec(this.value)[1]
            // }
            formatter: function() {
              return this.value;
            }
          }
        },
        series: series
      });
    };

    function activateChart(graphElement) {
      // TODO: show a loading indicator until it receives a response?

      var benchmark = graphElement.attr('id');
      $.get('https://raw.githubusercontent.com/rubybench/rubybench/master/results/' + benchmark + '.yml').done(function (data) {
        // Show only graphElement and hide everything else
        $('.benchmark_graph').hide();
        graphElement.show();

        var versions = [];
        var vm_values = [];
        var mjit_values = [];
        var yjit_values = [];

        var date_results = jsyaml.load(data);
        for (var date in date_results) {
          var results = date_results[date];
          versions.push(date);
          vm_values.push(results[0]);
          mjit_values.push(results[1]);
          yjit_values.push(results[2]);
        }

        graphElement.data('versions', versions);
        graphElement.data('vm-values', vm_values);
        graphElement.data('jit-values', mjit_values);
        graphElement.data('yjit-values', yjit_values);

        plotChart(graphElement);
      });
    };

    $('.activate-chart').on('click', function(event) {
      event.preventDefault();
      $('.benchmark_navbar li').removeClass('active');
      $(this).closest('li').addClass('active');
      var id = $(this).data('id');
      var graphElement = $("#" + id);
      activateChart(graphElement);
      window.location.hash = id;
    });

    var url = document.location.toString();
    if (url.match('#')) {
      var id = url.split('#')[1];
      $('.benchmark_navbar li').removeClass('active');
      activateChart($('.benchmark_graph#' + id));
      $('.activate-chart[data-id=' + id + ']').closest('li').addClass('active');
    }
    else {
      activateChart($('.benchmark_graph##{benchmarks.first}'));
    }
  });

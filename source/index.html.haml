.index_page.text-center
  %h1.large_title Rubybench

  .description_box
    %p.large_explanation
      Benchmark results for CRuby development

%h2.text-center yjit-bench
%h4.text-center Set of benchmarks for the YJIT CRuby JIT compiler

%table.benchmarks-table.table.table-striped
  %thead
    %tr
      %th Category
      %th Benchmarks
  %tbody
    :ruby
      category_benchmarks = {
        'Headlining Benchmarks' => %w[activerecord hexapdf liquid-render mail psych-load railsbench ruby-lsp],
        'Other Benchmarks' => %w[binarytrees chunky_png erubi erubi_rails etanni fannkuchredux lee nbody optcarrot rubykon],
        'MicroBenchmarks' => %w[30k_ifelse 30k_methods cfunc_itself fib getivar keyword_args respond_to setivar str_concat],
      }
    - category_benchmarks.each do |category, benchmarks|
      %tr
        %td= category
        %td.margined-links
          - benchmarks.each do |benchmark|
            = link_to benchmark, "/benchmarks/yjit-bench.html##{benchmark}"

%h2.text-center ruby/ruby
%h4.text-center Ruby core benchmarks

%table.benchmarks-table.table.table-striped
  %thead
    %tr
      %th Category
      %th Benchmarks
  %tbody
    :ruby
      category_benchmarks = {
        'Application' => %w[app_answer app_erb app_fib app_mandelbrot app_raise app_tak app_uri app_aobench
                            app_factorial app_lc_fizzbuzz app_pentomino app_strconcat app_tarai],
        # TODO: array_flatten array_min array_intersection array_max_float array_max_int array_max_str array_sample
        'Array' => %w[array_sample_100k__1k array_small_and array_values_at_int
                      array_sample_100k__100 array_sample_100k___50k array_small_diff
                      array_values_at_range array_sample_100k___10k array_sample_100k__6k
                      array_small_or array_sample_100k_10 array_sort_block
                      array_sample_100k_11 array_shift array_sort_float],
        'Complex' => %w[complex_float_add complex_float_div complex_float_mul complex_float_new complex_float_power complex_float_sub],
        # TODO: enum_lazy_flat_map enum_lazy_zip enum_tally
        'Enum' => %w[enum_lazy_grep_v_100 enum_lazy_grep_v_20 enum_lazy_grep_v_50 enum_lazy_uniq_100 enum_lazy_uniq_20 enum_lazy_uniq_50],
        # TODO: hash_defaults hash_dup hash_first
        'Hash' => %w[hash_aref_array hash_aref_dsym_long hash_aref_dsym hash_aref_fix hash_aref_flo hash_aref_miss hash_aref_str
                     hash_aref_sym_long hash_aref_sym hash_flatten hash_ident_flo hash_ident_num
                     hash_ident_obj hash_ident_str hash_ident_sym hash_keys hash_literal_small2 hash_literal_small4 hash_literal_small8
                     hash_long hash_shift hash_shift_u16 hash_shift_u24 hash_shift_u32 hash_small2 hash_small4 hash_small8 hash_to_proc hash_values],
        'IO' => %w[io_copy_stream_write io_copy_stream_write_socket io_file_create io_file_read io_file_write io_nonblock_noex2
                   io_nonblock_noex io_pipe_rw io_select2 io_select3 io_select io_write],
        'Loop' => %w[loop_for loop_generator loop_times loop_whileloop2 loop_whileloop],
        'Shootout' => %w[so_ackermann so_array so_binary_trees so_concatenate so_count_words so_exception so_fannkuch so_fasta
                         so_k_nucleotide so_lists so_mandelbrot so_matrix so_meteor_contest so_nbody so_nested_loop so_nsieve_bits
                         so_nsieve so_object so_partial_sums so_pidigits so_random so_reverse_complement so_sieve so_spectralnorm],
        # TODO: String
        # TODO: vm_block_handler vm_freezeobj vm_ivar_get_unintialized vm_ivar_set_subclass
        'VM' => %w[vm_array vm_attr_ivar_set vm_attr_ivar vm_backtrace vm_bigarray vm_bighash vm_blockparam_call vm_blockparam_pass
                   vm_blockparam_yield vm_blockparam vm_block vm_case_classes vm_case_lit vm_case vm_clearmethodcache vm_const vm_cvar vm_defined_method
                   vm_dstr_ary vm_dstr_bool vm_dstr_class_module vm_dstr_digit vm_dstr_int vm_dstr_nil vm_dstr_obj_def vm_dstr_obj vm_dstr_str
                   vm_dstr_sym vm_dstr vm_ensure vm_eval vm_fiber_allocate vm_fiber_count vm_fiber_reuse_gc vm_fiber_reuse vm_fiber_switch vm_float_simple
                   vm_freezestring vm_gc_old_full vm_gc_old_immediate vm_gc_old_lazy vm_gc vm_gc_short_lived vm_gc_short_with_complex_long
                   vm_gc_short_with_long vm_gc_short_with_symbol vm_gc_wb_ary_promoted vm_gc_wb_ary vm_gc_wb_obj_promoted vm_gc_wb_obj vm_iclass_super
                   vm_ivar_embedded_obj_init vm_ivar_extended_obj_init vm_ivar_generic_get vm_ivar_generic_set vm_ivar_get
                   vm_ivar_lazy_set vm_ivar_of_class_set vm_ivar_of_class vm_ivar_set_on_instance vm_ivar_set vm_ivar vm_length
                   vm_lvar_cond_set vm_lvar_init vm_lvar_set vm_method_missing vm_method_with_block vm_method vm_module_ann_const_set vm_module_const_set
                   vm_mutex vm_neq vm_newlambda vm_not vm_poly_method_ov vm_poly_method vm_poly_same_method vm_poly_singleton vm_proc vm_raise1
                   vm_raise2 vm_regexp vm_rescue vm_send_cfunc vm_send vm_simplereturn vm_string_literal vm_struct_big_aref_hi vm_struct_big_aref_lo
                   vm_struct_big_aset vm_struct_big_href_hi vm_struct_big_href_lo vm_struct_big_hset vm_struct_small_aref vm_struct_small_aset
                   vm_struct_small_href vm_struct_small_hset vm_super vm_swap vm_symbol_block_pass vm_thread_alive_check vm_thread_close
                   vm_thread_condvar1 vm_thread_condvar2 vm_thread_create_join vm_thread_mutex1 vm_thread_mutex2 vm_thread_mutex3 vm_thread_pass_flood
                   vm_thread_pass vm_thread_pipe vm_thread_queue vm_thread_sized_queue2 vm_thread_sized_queue3 vm_thread_sized_queue4
                   vm_thread_sized_queue vm_thread_sleep vm_unif1 vm_yield vm_zsuper],
        # TODO: Others
      }
    - category_benchmarks.each do |category, benchmarks|
      %tr
        %td= category
        %td.margined-links
          - benchmarks.each do |benchmark|
            = link_to benchmark.split('_', 2).last.gsub(/_/, ' '), "/benchmarks/ruby.html##{benchmark}"
